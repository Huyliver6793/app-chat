{"remainingRequest":"/home/deploy/app-chat/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/deploy/app-chat/node_modules/ng2-cable/ng2-cable.js","dependencies":[{"path":"/home/deploy/app-chat/node_modules/ng2-cable/ng2-cable.js","mtime":1535381319390},{"path":"/home/deploy/app-chat/node_modules/cache-loader/dist/cjs.js","mtime":1535381318830},{"path":"/home/deploy/app-chat/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1535381318174}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport * as ActionCable from 'actioncable';\nimport { Broadcaster } from './broadcaster';\nexport var Ng2Cable = /*@__PURE__*/ (function () {\n    function Ng2Cable(broadcaster) {\n        this.broadcaster = broadcaster;\n        this.actionCable = ActionCable;\n    }\n    Ng2Cable.prototype.subscribe = function (url, channel, params) {\n        var _this = this;\n        if (params === void 0) {\n            params = {};\n        }\n        this.setCable(url);\n        var subscriptionParams = Object.assign({ channel: channel }, params);\n        this.subscription = this.cable.subscriptions.create(subscriptionParams, {\n            received: function (data) {\n                _this.broadcaster.broadcast((data.action || channel), data);\n            }\n        });\n    };\n    Ng2Cable.prototype.setCable = function (url) {\n        this.cable = ActionCable.createConsumer(url);\n    };\n    Ng2Cable.prototype.unsubscribe = function () {\n        this.cable.subscriptions.remove(this.subscription);\n    };\n    return Ng2Cable;\n}());\n//# sourceMappingURL=ng2-cable.js.map \n",null]}